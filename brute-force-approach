package arrays;
import java.util.Arrays;
import java.util.Scanner;



class BruteForceDemo{

    public static void main(String[] args){
        /*
         Brute force means solving a problem by trying all possible solutions or steps directly, 
         without using any optimization or clever techniques. 

         It is the most straightforward and simplest way to solve a problem 
         — usually the first solution that comes to mind. 
         
         Try everything → check all combinations, pairs, or possibilities. 

         {12 , 17 , 21 , 35 , 49 , 50 , 55 , 60 }

         100 -> 100 times 

         k = 55


         1. Reverse an array

          INPUT - 
             0    1   2    3    4
          { 23 , 45, 14 , 23 , 20}

          OUTPUT - 

           4     3    2    1   0
          {20 , 23 , 14 , 45 , 23 }


          Time complexity : O(n)
          Space complexity : O(n)

          Idea - 

          create a temporary array of same size 

          copy all the elements of arry into temporary array from backward 

          copy temp array to our original array

         2.Pair with Target Sum (Sorted Array) 
         Given a sorted array and a target sum, find if there exists a pair whose sum equals target.

         Time complexity - O(n2)
         Space complexity - O(1)

         {12 , 15 , 20 , 40 , 55}

         target sum = 60

         12+15 = 27

         12+20 = 32

         12+40 = 52

         12+55 = 67 

 
         15+20 =35
         15+40 = 55
         15+55 = 70

         20+40 = 60

         true 

       
         
         3.Move All Zeroes to End 

         Move all 0s to the end and keep all non-zero numbers in the same order they appeared. 
         
         Example: Input = [0, 1, 0, 3, 12] Output = [1, 3, 12, 0, 0]

         1. take an temporary array of same size 

         temp{ 1 , 3 ,12 , 0, 0}


         4. Dutch National Flag problem
         Given an array of 0s,1s,2s sort it without built-in sort. 

         Input int[] arr = {2, 0, 2, 1, 1, 0}; 
         Output [0, 0, 1, 1, 2, 2] 

         Idea - 
          1. Count how many 0s, 1s, and 2s are there. 
          2. Rewrite the array with that many 0s, then 1s, then 2s.

          5. Three Sum 

          Program to count the number of triplets whose sum is equal to the given number .

          Input int[] arr = {1,4,6,2,3,5}
          int x = 10;
           0    1   2   3   4    
          {1 , 4  , 6 , 2 , 3 }
           1+4+6 = 11 , count = 0
           1+4+2 = 7 , count = 0
           1+4+ 3 = 8 , count = 0 

           1+6+2 = 9 , copunt = 0 
           1+6+3 = 10 , count = 1
           1+6+5 = 12 , count = 1
           1+2+3 = 6 , count = 1

           time complexity : O(n3)
           space complexity : O(1)

          6. Prefix Sum

          Input: arr =     [1,2,3,4] 
          Output: prefix = [1,3,6,10] 

          time  complkexity : O(n2)
          space complexity : O(n)


         
         
         */

         Scanner sc = new Scanner(System.in);
         System.out.println("Enter size of the array : ");
         int n = sc.nextInt();

         int[] arr = new int[n];

         for(int i = 0 ; i<n;i++){
            System.out.println("Enter number : ");
            arr[i] = sc.nextInt();
         }
          System.out.println("Original Array : ");
          System.out.println(Arrays.toString(arr));
          prefixSum(arr);
          System.out.println("After prefix sum : " + Arrays.toString(arr));


         // System.out.println("Enter target sum : ");
          //int target = sc.nextInt();
         // System.out.println("Count : "+ threeSumCount(arr, target));
         //  dutchFlagSolution(arr);
         // System.out.println("After solving dutch flag : " + Arrays.toString(arr));

         

        // revArray(arr);
         /*System.out.println("Array after reverse : ");
         System.out.println(Arrays.toString(arr));

         */

        // System.out.println("Array after moving all 0s to end ");
         //moveAllZerosToEnd(arr);

       //  System.out.println(Arrays.toString(arr) );

         


         
    }

    public static void revArray(int[] arr){ 
        int n = arr.length; // --- 4 bytes 

        int[] temp = new int[n]; // 4*n bytes
        int k = 0 ;  // 4 bytes
        for(int i = n-1 ; i>=0; i--){  

            temp[k] = arr[i]; 
            k++; 



        }

        for(int i = 0 ; i<n; i++){ 
            arr[i] = temp[i]; 
        }


        /// 3+ n+1+n+n+n+1+n = 5 + 5n == n
        /// O(n)
        /// 4+4n+4 = 8+4n 

        



        




    }
   
    public static boolean isTargetSumExist(int[] arr , int target){

        boolean isExist = false ;
        int n = arr.length;

        for(int i = 0 ; i<n; i++){

            for(int j = i+1; j<n;j++){
                if(arr[i]+arr[j] == target){
                    isExist = true;
                    return isExist;
                }
            }
        }


        return isExist ;


    }
   
    public static void moveAllZerosToEnd(int[] arr) {

        int n = arr.length;

        int[] temp = new int[n];
        int i = 0;
        // enhanced loop {12 , 0 , 2 , 0 , 11}
        //{12 ,2 ,11 , 0 , 0}
        //i = 4

        for(int x : arr){
            if(x!=0){
                temp[i] = x;
                i++;
            }




        }

        while(i<n){
            temp[i] = 0;
            i++;
        }

        for(int j = 0; j<n;j++){
            arr[j] = temp[j];
        }

        

    }
   
    public static void dutchFlagSolution(int[] arr) {
        

        int c0 = 0 ; 
        int c1 = 0; 
        int c2 = 0 ; 

        for(int num : arr){

            if(num==0){
                c0++;
            }else if(num==1){
                c1++;
            }else{
                c2++;
            }
        }

        int index = 0 ;

        for(int i = 0 ; i<c0;i++){
            arr[index] = 0;
            index++;
        }

        for(int j = 0 ; j<c1; j++){
            arr[index] = 1;
            index++;

        }

        for(int k = 0;k<c2;k++){
            arr[index] = 2;
            index++;
        }

        
       

        

    } 
    

    public static int threeSumCount(int[] arr , int target){

        int count = 0 ; 

        int n = arr.length;
        for(int i = 0 ; i<n;i++){
            for(int j = i+1 ; j<n;j++){
                for(int k = j+1; k<n;k++){

                    if(arr[i] + arr[j] + arr[k] == target){
                        count++;
                    }
                }
            }
        }




        return count;

    }
    
    public static void prefixSum(int[] arr){

        int n = arr.length;
        int temp[] = new int[n];
        int index = 0 ;
        // 1 , 2 , 3 , 4
        for(int i = 0 ; i<n;i++){
            int sum = 0 ; 
            for(int j = 0 ; j<=i; j++){
                sum = sum + arr[j];
               
            
            }
            temp[index] = sum ;
            index++;

        }

        for(int i = 0 ; i<n;i++){
            arr[i] = temp[i];
        }
    }


}
