package arrays;

import java.util.Arrays;

public class DutchNationalFlag {
    public static void main(String[] args){

        /*
         You are given an array containing only 0, 1, and 2.
         You need to sort the array in-place so that all 0s come first, 
         then all 1s, and then all 2s — without using any sorting algorithm or extra space.

         Example:

         Input:  [2, 0, 1, 2, 0, 1]
         Output: [0, 0, 1, 1, 2, 2]


         Two-Pointer Algorithm (Dutch National Flag)

         We’ll use three pointers:

         low → boundary for 0s

         mid → current element

         high → boundary for 2s

         Traverse the array while mid <= high
         low = 0
         high = n-1

         mid = 0

        

         If arr[mid] == 0:
         → Swap arr[low] and arr[mid]
         → Increment both low and mid

         If arr[mid] == 1:
         → Just move mid++

         If arr[mid] == 2:
         → Swap arr[mid] and arr[high]
         → Decrement high only


           0   1  2  3  4  5
          [2, 0, 1, 2, 0, 1]
          ||              |
         
         
          low = 0 
          mid = 0 
          high = 5

          [1,0,1,2,0,2]
           ||        |
          low = 0 
          mid = 0 
          high = 4

          [1,0,1,2,0,2]
           | |       | 

           low = 0 
           mid = 1 
           high = 4 


           [0,1,1,2,0,2]
              | |   |  
           low = 1
           mid = 2
           high = 4
          [0,1,1,2,0,2]
             |   | |

             low =1 
             mid = 3
             high = 4


             [0,1,1,0,2,2]
                |   ||


                low = 1
                mid = 3
                high = 3


                [0 ,0,1,1,2,2]
                      |  | |

                      low = 2
                      mid = 4
                      high = 3


                      [0 ,0,1,1,2,2]



         */



        int[] arr = {0,1,2,0,1,1,1,0,2,0,2,1};

        System.out.println("Array without sorting : "+ Arrays.toString(arr));

        int n = arr.length;

        int low = 0 ; 
        int mid = 0 ; 
        int high = n-1;

        while(mid<=high){

            if(arr[mid] == 0){
                int temp = arr[low] ; 
                arr[low] = arr[mid] ; 
                arr[mid] = temp ;

                low++;
                mid++;
            }
            else if(arr[mid] == 1){
                mid++;
            }else{
                int temp = arr[high] ; 
                arr[high] = arr[mid] ; 
                arr[mid] = temp ;

                high--;
            }
        }


        System.out.println("Array after sorting : "+ Arrays.toString(arr));

        
    }
    
}
